def diagnostics_prefs()   @diagnostics_prefs      end
def diagnostics_recipes() @diagnostics_recipes    end
def gems()                @gems                   end
def prefs()               @prefs                  end
def recipes()             @recipes                end
def prefer(key, value)    @prefs[key].eql? value  end
def recipe?(name)         @recipes.include? name  end

# https://github.com/wycats/thor/blob/master/lib/thor/shell/color.rb
def say_prefix() s=@current_recipe || 'composer';  say("#{       s.rjust 10} ", [:bold, :cyan])                     end
def say_custom(tag, text, color=nil)               say("#{tag.to_s.rjust 10} ", [:bold, :cyan]);  say(text, color)  end
def say_wizard(     text, color=nil)  say_prefix;                                                 say(text, color)  end
def ask_wizard(question)              say_prefix;  ask("  #{question}",         [:bold, :cyan])                     end
def say_recipe(name)                               say_custom('recipe',  "Running #{name} recipe...")               end

def yes_wizard?(question)
  result = nil # Define in scope.
  loop do
    say_wizard("  #{question} ", :cyan)
    case ask('(y/n)', :yellow).downcase
    when 'yes', 'y'
      result = true
      break
    when 'no', 'n'
      result = false
      break
    end
  end
  result
end
def no_wizard?(question) !yes_wizard?(question) end

def multiple_choice(question, choices)
  say_custom('question', question)
  values = {}
  choices.each_with_index do |choice,i|
    values[(i + 1).to_s] = choice[1]
    say_custom((i + 1).to_s + ')', choice[0])
  end
  answer = ask_wizard("Enter your selection:") while !values.keys.include?(answer)
  values[answer]
end

@current_recipe = nil
@configs = {}

@after_blocks = []
def after_bundler(   &block)             @after_blocks << [@current_recipe, block]  end

@after_everything_blocks = []
def after_everything(&block)  @after_everything_blocks << [@current_recipe, block]  end

@before_configs = {}
def before_config(   &block)  @before_configs[@current_recipe] = block              end

def copy_from(source, destination)
  begin
    remove_file(destination)
    get(source, destination)
  rescue OpenURI::HTTPError
    say_wizard "Unable to obtain #{source}"
  end
end

def copy_from_repo(filename, opts = {})
  return unless opts[:prefs].nil? || prefs.has_value?(opts[:prefs])
  repo = opts[:repo] || 'https://raw.github.com/RailsApps/rails-composer/master/files/'
  destination = source = filename
  destination = destination.gsub(/\-#{opts[:prefs]}/, '') if opts[:prefs] && destination.include?(opts[:prefs])
  if destination.include? 'views'
    s = case
    when prefer(:templates, 'haml') then '.haml'
    when prefer(:templates, 'slim') then '.slim'
    else nil end
    if s
      remove_file(destination)
      destination = destination.gsub(/.erb\z/, s)
    end
  end
  begin
    remove_file(destination)
    unless destination.include? 'views'
      get(repo + source, destination)
    else
# https://github.com/wycats/thor/blob/master/lib/thor/actions/create_file.rb
      case
      when prefer(:templates, 'haml')
        create_file(destination, html_to_haml(repo + source))
      when prefer(:templates, 'slim')
        create_file(destination, html_to_slim(repo + source))
      end
    end
  rescue OpenURI::HTTPError
    say_wizard "Unable to obtain #{source} from the repo #{repo}"
  end
end

def html_to_haml(source)
  begin
    html = Kernel.open(source) {|input| input.binmode.read }
    Haml::HTML.new(html, :erb => true, :xhtml => true).render
  rescue RubyParser::SyntaxError
    say_wizard "Ignoring RubyParser::SyntaxError"
    # special case to accommodate https://github.com/RailsApps/rails-composer/issues/55
    html = Kernel.open(source) {|input| input.binmode.read }
    say_wizard "applying patch" if html.include?('card_month') ||
                                   html.include?('card_year' )
    [
        /, {add_month_numbers: true}, {name: nil, id: "card_month"}/  ,
        /, {start_year: Date\.today\.year, end_year: Date\.today\.year\+10}, {name: nil, id: "card_year"}/  ,
    ].each{|r| html = html.gsub(r,'')}
    result = Haml::HTML.new(html, :erb => true, :xhtml => true).render
    [
        /select_month nil/,
        /select_year nil/,
    ].zip([
        'select_month nil, {add_month_numbers: true}, {name: nil, id: "card_month"}',
        'select_year nil, {start_year: Date.today.year, end_year: Date.today.year+10}, {name: nil, id: "card_year"}',
    ]).each{|r,s| result = result.gsub(r,s)}
  end
end

def html_to_slim(source)
  html = Kernel.open(source) {|input| input.binmode.read }
  haml = Haml::HTML.new(html, :erb => true, :xhtml => true).render
  Haml2Slim.convert!(haml)
end

# full credit to @mislav in this StackOverflow answer for the #which() method:
# - http://stackoverflow.com/a/5471032
def which(cmd)
  exts = ENV['PATHEXT'] ? ENV['PATHEXT'].split(';') : ['']
  ENV['PATH'].split(File::PATH_SEPARATOR).each do |path|
    exts.each do |ext|
    exe = "#{path}#{File::SEPARATOR}#{cmd}#{ext}"
      return exe if File.executable? exe
    end
  end
  nil
end
